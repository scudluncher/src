many uses

십진수 -> 이진수 String binaryString =  Integer.toBinaryString(int i)
                 String binaryString = Integer.toString(int i ,2);   





String
대소문자 toLowerCase toUpperCase

.replaceAll("[^._-a-z0-9]+",""); 없애기, 바꾸기   소문자 a~z 까지, . _ - 는 살린다 0~9까지도 살린다.





DFS : Stack 
1.
start point : stack 에 넣고
child node 가 있으면 (stack 에 들어가지 않은)
stack 에 넣고 start point pop
2. recursion 으로.




BFS : Queue

start point : Queue 에넣고
child node 있으면 (queue 에들어가지 않은)
queue 에 넣고 dequeue


char[] char 배열 String 으로
char[] answer=
answer = String.valueOf( answerArray);



========String ============== start
String -> char array
String numbers;
char[] numChars = numbers.toCharArray();



String --> List<Character> 변환
 List<Character> charList = s.chars().mapToObj(c -> (char) c).collect(Collectors.toList());



char ascii code 
char aaa = 'a'
int number = Character.getNumericValue(aaa);


String[] sliced = testMessage.split(" "); 띄어쓰기 나누기
========String ============= end


========숫자, int, Integer ============= start
int[] --> Integer[]   int 기본형 -> Integer 

Integer[] citationsInt =  Arrays.stream( citations )
                                .boxed()
                                .toArray( Integer[]::new );




숫자 역순으로 정렬
Integer[] citationInt 
 Arrays.sort(citationsInt, Collections.reverseOrder()); // 6 5 3 1 0


절대값 Math.abs(-1 ) = 1 

Integer stream 돌려서 최대값 찾기
 int maxValue = waitingLine.stream().map(x->x.priority).max(Integer::compare).get();

=========숫자, int, Integer =========== end 


array 배열====================

 일부 카피 
Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);

Arrays.sort(temp);   // 순서 정렬



List ===================
순서 거꾸로
Collections.reverse(recordList);



STACK========
 stack 선언
  Stack<Integer> arrStack = new Stack<Integer>();
arrStack.push();  // stack 넣기 
arrStack.pop();
arrStack.peek()

QUEUE======
 queue 선언
   Queue<Integer> intList = new LinkedList<Integer>();

 queue 에 넣기
 intList.offer(prices[i]);
 intList.peek() ==> 맨앞에 있는 값 보기 (return X 빼지도 않음)
 intList.poll() ==> 맨 앞에 있는 값 빼서 return 





  -----comparator

          Comparator<Employee> salesComparator = new Comparator<Employee>() {
            @Override
            public int compare(Employee o1, Employee o2) {
                return o2.getSales().intValue() - o1.getSales().intValue();
            }
        };


-----Comparable
--> @override compareTo
 @Override
    public int compareTo(Employee o) {
        return this.name.compareTo(o.name);
        //return this.id - o.id;
        //return this.department.compareTo(o.department);
    }

