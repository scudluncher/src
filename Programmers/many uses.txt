many uses

십진수 -> 이진수 String binaryString =  Integer.toBinaryString(int i)
                 String binaryString = Integer.toString(int i ,2);   





String
대소문자 toLowerCase toUpperCase

.replaceAll("[^._-a-z0-9]+",""); 없애기, 바꾸기   소문자 a~z 까지, . _ - 는 살린다 0~9까지도 살린다.





DFS : Stack 
1.
start point : stack 에 넣고
child node 가 있으면 (stack 에 들어가지 않은)
stack 에 넣고 start point pop
2. recursion 으로.




BFS : Queue

start point : Queue 에넣고
child node 있으면 (queue 에들어가지 않은)
queue 에 넣고 dequeue


char[] char 배열 String 으로
char[] answer=
answer = String.valueOf( answerArray);


String -> char array
String numbers;
char[] numChars = numbers.toCharArray();



char ascii code 
char aaa = 'a'
int number = Character.getNumericValue(aaa);



int[] --> Integer[]   int 기본형 -> Integer 
Integer[] citationsInt =  Arrays.stream( citations )
                                .boxed()
                                .toArray( Integer[]::new );




숫자 역순으로 정렬
Integer[] citationInt 
 Arrays.sort(citationsInt, Collections.reverseOrder()); // 6 5 3 1 0



 Collections.reverse(recordList);

 stack 선언
  Stack<Integer> arrStack = new Stack<Integer>();



  -----comparator

          Comparator<Employee> salesComparator = new Comparator<Employee>() {
            @Override
            public int compare(Employee o1, Employee o2) {
                return o2.getSales().intValue() - o1.getSales().intValue();
            }
        };


-----Comparable
--> @override compareTo
 @Override
    public int compareTo(Employee o) {
        return this.name.compareTo(o.name);
        //return this.id - o.id;
        //return this.department.compareTo(o.department);
    }

